library(citr)
detach("package:citr", unload = TRUE)
uninstall(citr)
remove.packages("citr")
devtools::install_github("crsh/citr")
df <- mtcars
df %>% group_by(cyl) %>% summarize(min = min(mpg))
df %>% group_by(cyl) %>% summarize(min = min(mpg))
?slice
df %>% group_by(cyl) %>% slice(1L)
df %>% group_by(cyl) %>% slice(5L)
df.1 <- df %>% group_by(cyl) %>% slice(5L)
View(df.1)
df.1 <- df %>% group_by(cyl) %>% slice(mpg, 5L)
df.1 <- df %>% group_by(cyl) %>% slice(mpg, n = 5)
df %>% group_by(cyl) %>% slice(mpg, n = 5)
df.1 <- df %>% group_by(cyl) %>% arrange(mpg)
View(df.1)
df.1 <- df %>% group_by(cyl) %>% mutate(rank = rank(mpg))
View(df.1)
?rank
View(df.1)
df.1 <- df %>%
group_by(cyl) %>%
mutate(rank = rank(mpg, ties.method = "first")) %>%
dplyr::filter(rank == 5)
View(df.1)
View(df.1)
a.key <- data.frame(number = c(1, ncol(mtcars)),
key = colnames(mtcars))
ncol(mtcars)
colnames(mtcars)
a.key <- data.frame(number = c(1: ncol(mtcars)),
key = colnames(mtcars))
t(a.key)
a.key <- t(a.key)
a.key <- data.frame(t(a.key))
a.key <- data.frame(number = c(1: ncol(mtcars)),
key = colnames(mtcars))
a.key <- data.frame(t(a.key))
a.key <- data.frame(number = c(1: ncol(mtcars)),
key = colnames(mtcars),
stringsAsFactors = F)
a.key <- data.frame(t(a.key))
a.key <- data.frame(number = c(1: ncol(mtcars)),
key = colnames(mtcars),
stringsAsFactors = F)
View(a.key)
a.key
key <- data.frame(number = c(1: ncol(mtcars)),
key = colnames(mtcars),
stringsAsFactors = F)
key
print(key)
?print
require(stats)
ts(1:20)
for(i in 1:3) print(1:i)
t1 <- round(abs(rt(200, df = 1.8)))
t2 <- round(abs(rt(200, df = 1.4)))
table(t1, t2) # simple
print(table(t1, t2), zero.print = ".")
key
df %>% arrange(cyl, mpg)
df %>% group_by(cyl) %>% slice(mpg, n = 5)
df
str(df)
df %>% group_by(cyl) %>% slice(n = 5)
df %>% group_by(cyl, mpg) %>% slice(n = 5)
df %>% group_by(cyl) %>% slice(n = 5)
View(df)
df %>% group_by(cyl) %>% arrange(mpg) %>% slice(n = 5) #5th one
df %>%  arrange(cyl, mpg) %>% group_by(cyl) %>% slice(n = 5) #5th one
setwd("./blogdown-even")
blogdown::build_site()
blogdown::serve_site()
library(magrittr)
library(htmlwidgets)
library(leaflet)
library(widgetframe)
library(leaflet)
library(widgetframe)
library(magrittr)
l % addTiles() %>% setView(0,0,1)
library(htmlwidgets)
library(leaflet)
library(widgetframe)
library(leaflet)
library(widgetframe)
library(magrittr)
l %>% addTiles() %>% setView(0,0,1)
?leaflet
library(leaflet)
library(widgetframe)
library(magrittr)
m <- leaflet() %>% addTiles()
frameWidget(m)
my.pkgs <- c("leaflet", "widgetframe", "htmlwidget", "magrittr")
lapply(my.pkgs, library, character.only = T)
my.pkgs <- c("leaflet", "widgetframe", "htmlwidgets", "magrittr")
lapply(my.pkgs, library, character.only = T)
?library
lapply(my.pkgs, library, character.only = T, quietly = T)
lapply(my.pkgs, library, character.only = T, quietly = T, verbose = F)
my.pkgs <- c("leaflet", "widgetframe", "htmlwidgets", "magrittr")
lapply(my.pkgs, function(x) suppressPackageStartupMessages(library(x, character.only = T)))
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
setwd("..")
blogdown::new_site
blogdown::install_hugo
?blogdown::`blogdown-package`
blogdown::new_post
function (title, kind = "", open = interactive(), author = getOption("blogdown.author"),
categories = NULL, tags = NULL, date = Sys.Date(), file = NULL,
slug = NULL, title_case = getOption("blogdown.title_case"),
subdir = getOption("blogdown.subdir", "post"), ext = getOption("blogdown.ext",
".md"))
{
if (is.null(file))
file = post_filename(title, subdir, ext, date)
file = trim_ws(file)
if (missing(kind))
kind = default_kind(file)
if (is.null(slug) && auto_slug())
slug = post_slug(file)
slug = trim_ws(slug)
if (generator() == "hugo")
file = new_content(file, kind, FALSE)
else {
writeLines(c("---", "", "---"), file)
}
if (isTRUE(title_case))
title_case = tools::toTitleCase
if (is.function(title_case))
title = title_case(title)
if (get_option("blogdown.warn.future", TRUE)) {
if (isTRUE(tryCatch(date > Sys.Date(), error = function(e) FALSE)))
warning("The date of the post is in the future: ",
date, ". See ", "https://github.com/rstudio/blogdown/issues/377 for consequences, ",
"and see https://alison.rbind.io/post/2019-03-04-hugo-troubleshooting/#dates ",
"for a workaround by distinguishing date and publishDate in YAML header. ",
"To turn off this warning, set options(blogdown.warn.future = FALSE).")
}
do.call(modify_yaml, c(list(file, title = title, author = author,
date = format(date), slug = slug, categories = as.list(categories),
tags = as.list(tags)), if (!file.exists("archetypes/default.md")) list(draft = NULL)))
open_file(file, open)
file
}
x <- function (title, kind = "", open = interactive(), author = getOption("blogdown.author"),
categories = NULL, tags = NULL, date = Sys.Date(), file = NULL,
slug = NULL, title_case = getOption("blogdown.title_case"),
subdir = getOption("blogdown.subdir", "post"), ext = getOption("blogdown.ext",
".md"))
{
if (is.null(file))
file = post_filename(title, subdir, ext, date)
file = trim_ws(file)
if (missing(kind))
kind = default_kind(file)
if (is.null(slug) && auto_slug())
slug = post_slug(file)
slug = trim_ws(slug)
if (generator() == "hugo")
file = new_content(file, kind, FALSE)
else {
writeLines(c("---", "", "---"), file)
}
if (isTRUE(title_case))
title_case = tools::toTitleCase
if (is.function(title_case))
title = title_case(title)
if (get_option("blogdown.warn.future", TRUE)) {
if (isTRUE(tryCatch(date > Sys.Date(), error = function(e) FALSE)))
warning("The date of the post is in the future: ",
date, ". See ", "https://github.com/rstudio/blogdown/issues/377 for consequences, ",
"and see https://alison.rbind.io/post/2019-03-04-hugo-troubleshooting/#dates ",
"for a workaround by distinguishing date and publishDate in YAML header. ",
"To turn off this warning, set options(blogdown.warn.future = FALSE).")
}
do.call(modify_yaml, c(list(file, title = title, author = author,
date = format(date), slug = slug, categories = as.list(categories),
tags = as.list(tags)), if (!file.exists("archetypes/default.md")) list(draft = NULL)))
open_file(file, open)
file
}
args(x)
setwd("../blogdown-default")
setwd("./blogdown-default/")
blogdown:::new_post_addin()
my.l <- list()
my.l[[1]] <- list(categories = "R", tags = "list")
my.l[[2]] <- list(categories = "R", tags = c("list", "dataframe"))
names(my.l)
names(my.l) <- c("post_1", "post_2")
lapply(my.l, as.data.frame)
do.call(rbind, my.l)
do.call(rbind, my.l)
my.df <- do.call(rbind, my.l)
View(my.df)
my.df <- do.call(rbind.data.frame, my.l)
blogdown::serve_site()
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
View(df)
names(my.l)
row.names(df) <- names(my.l)
View(df)
col.names(df) <- c("categories", "tags")
colnames(df) <- c("categories", "tags")
View(df)
df %>% tidyr::separate_rows(., sep = "|")
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidyverse'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
df %>% tidyr::separate_rows(., sep = "|")
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidyverse'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
## Do not break chunk line
## Do not use spaces or periods "." or underscores "_"
## set options for knitr
knitr::opts_chunk$set(
comment = '',
fig.width = 6,
fig.asp = .8,
fig.align="center",
message=F,
error=F,
warning=F,
tidy=T,
comment='',
cache=T,
dev='svg',
echo=F
)
#from ggthemes
library(ggplot2); theme_set(ggthemes::theme_fivethirtyeight())
# color blind friendly palette from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
my.l <- list()
my.l[[1]] <- list(categories = "R", tags = "list")
my.l[[2]] <- list(categories = "R", tags = c("list", "dataframe"))
names(my.l) <- c("post_1", "post_2")
my.df <- do.call(rbind.data.frame, my.l)
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
row.names(df) <- names(my.l)
colnames(df) <- c("categories", "tags")
df
df %>% tidyr::separate_rows(., sep = "|")
# system & package info
options(width = 120)
session_info()
df %>% tidyr::separate_rows(., sep = "|")
df %>% tidyr::separate_rows(sep = "|")
df %>% tidyr::separate_rows(sep = "\\|")
df %>% tidyr::separate_rows(sep = "\|")
df %>% tidyr::separate_rows(sep = "\\|")
tidyr::separate_rows(df, sep = "\\|")
df %>% tidyr::separate_rows(sep = "\\|")
a <- df %>% tidyr::separate_rows(sep = "\\|")
View(a)
View(df)
View(a)
View(df)
tidyr::separate_rows()
?tidyr::separate_rows
str(df)
a <- df %>% tidyr::separate_rows(tags, sep = "\\|")
a <- df %>% tidyr::separate_rows(tags, sep = "\\|")
a <- df %>% tidyr::separate_rows(tags, sep = "\\|")
df %>% tidyr::separate_rows(tags, sep = "\\|")
df %>% tidyr::separate_rows(tags, sep = "\\|")
df$names <- names(my.l)
colnames(df) <- c("categories", "tags")
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
df$names <- names(my.l)
colnames(df)[2:3] <- c("categories", "tags")
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
df$name <- names(my.l)
colnames(df)[2:3] <- c("categories", "tags")
df
df %>% tidyr::separate_rows(tags, sep = "\\|")
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
df$name <- names(my.l)
colnames(df)[2:3] <- c("categories", "tags")
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
df$name <- names(my.l)
colnames(df)[1:2] <- c("categories", "tags")
df
df %>% tidyr::separate_rows(tags, sep = "\\|")
df %>% tidyr::separate(tags, into = "tag_1", sep ="\\|")
?separate
df %>% tidyr::separate(tags, into = c("tag_1", "tag_2"), sep ="\\|")
df %>% tidyr::separate_rows(tags, sep = "\\|")
df %>% tidyr::separate_rows(tags, sep = "\\|")
serve_site()
blogdown::serve_site()
blogdown::serve_site()
l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3)
, b = list(var.1 = 4, var.2 = 5)
, c = list(var.1 = 7, var.3 = 9)
, d = list(var.1 = 10, var.2 = 11, var.3 = NA))
l
df %>%dplyr::bind_rows(l)
library(magrittr)
df %>%dplyr::bind_rows(l)
library(dplyr)
df %>% dplyr::bind_rows(l)
df %>% purrr::map_df(l, dplyr::bind_rows)
df <- purrr::map_df(l, ~.x)
df <- dplyr::bind_rows(l)
df <- purrr::map_df(l, dplyr::bind_rows)
df <- purrr::map_df(l, ~.x)
my.l <- list()
my.l[[1]] <- list(categories = "R", tags = "list")
my.l[[2]] <- list(categories = "R", tags = c("list", "dataframe"))
names(my.l) <- c("post_1", "post_2")
my.df <- do.call(rbind.data.frame, my.l)
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
df <- data.frame(matrix(unlist(new.l), nrow=length(new.l), byrow=TRUE), stringsAsFactors = F)
View(df)
dt <- data.table::rbindlist(new.l)
View(dt)
list(structure(list(Hit = "True", Project = "Blue", Year = "2011",
Rating = "4", Launch = "26 Jan 2012", ID = "19", Dept = "1, 2, 4"), .Names = c("Hit",
"Project", "Year", "Rating", "Launch", "ID", "Dept")), structure(list(
Hit = "False", Error = "Record not found"), .Names = c("Hit",
"Error")), structure(list(Hit = "True", Project = "Green", Year = "2004",
Rating = "8", Launch = "29 Feb 2004", ID = "183", Dept = "6, 8"), .Names = c("Hit",
"Project", "Year", "Rating", "Launch", "ID", "Dept")))
my.l <- list(structure(list(Hit = "True", Project = "Blue", Year = "2011",
Rating = "4", Launch = "26 Jan 2012", ID = "19", Dept = "1, 2, 4"), .Names = c("Hit",
"Project", "Year", "Rating", "Launch", "ID", "Dept")), structure(list(
Hit = "False", Error = "Record not found"), .Names = c("Hit",
"Error")), structure(list(Hit = "True", Project = "Green", Year = "2004",
Rating = "8", Launch = "29 Feb 2004", ID = "183", Dept = "6, 8"), .Names = c("Hit",
"Project", "Year", "Rating", "Launch", "ID", "Dept")))
lapply(l, length)
lapply(my.l, length)
rbindlist(my.l, fill=TRUE)
library(data.table)
rbindlist(my.l, fill=TRUE)
df <- rbindlist(my.l, fill=TRUE)
View(df)
my.l <- list()
my.l[[1]] <- list(categories = "R", tags = "list")
my.l[[2]] <- list(categories = "R", tags = c("list", "dataframe"))
names(my.l) <- c("post_1", "post_2")
rbindlist(my.l, fill=TRUE)
my.df <- rbindlist(my.l, fill=TRUE)
View(my.df)
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
#fast
dt <- data.table::rbindlist(new.l)
View(dt)
df %>% tidyr::separate_rows(tags, sep = "\\|")
my.df <- rbindlist(my.l, fill=TRUE)
my.df <- do.call(rbind.data.frame, my.l)
#my.df <- do.call(rbind.data.frame, my.l)
my.df <- rbindlist(my.l, fill=TRUE)
my.df
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
#fast
dt <- data.table::rbindlist(new.l)
dt %>% tidyr::separate_rows(tags, sep = "\\|")
dt %>% tidyr::separate(tags, into = c("tag_1", "tag_2"), sep ="\\|")
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
#fast
dt <- data.table::rbindlist(new.l)
names(new.l)
dt$names <- names(new.l)
```{r, separate-rows, echo = T}
dt %>% tidyr::separate_rows(tags, sep = "\\|")
dt %>% tidyr::separate(tags, into = c("tag_1", "tag_2"), sep ="\\|")
# Many potential solutions
data.table::rbindlist(my.l, fill=TRUE)
#combine with info from list page
new.l <-rapply(my.l, function(x) paste(x, collapse = "|"), how='replace')
#fast
dt <- data.table::rbindlist(new.l)
dt$names <- names(new.l)
dt
# Many potential solutions
do.call(rbind, my.l)
data.table::rbindlist(my.l, fill=TRUE)
my.l <- list()
my.l[[1]] <- list(categories = "R", tags = "list")
my.l[[2]] <- list(categories = "R", tags = c("list", "dataframe"))
names(my.l) <- c("post_1", "post_2")
# Many potential solutions
do.call(rbind, my.l)
# Many potential solutions
df <- do.call(rbind, my.l)
View(df)
# Many potential solutions
do.call(rbind.data.frame, my.l)
data.table::rbindlist(my.l, fill=TRUE)
install.packages("rlist")
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidyverse',
'rlist',
'purrr'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
citation(package = "rlist")
citr:::insert_citation()
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidyverse',
'rlist',
'purrr'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
citr:::insert_citation()
?purrr:map
?purrr::map
?rlist::list.rbind
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
