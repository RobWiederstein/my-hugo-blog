#return probability
flights_pred <-
predict(flights_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(arr_delay, time_hour, flight))
flights_pred
flights_pred %>%
roc_curve(truth = arr_delay, .pred_late) %>%
autoplot()
# THE CELL IMAGE DATA
data(cells, package = "modeldata")
?modeldata
modeldata::data(list = ls())
?modeldata
library(modeldata)
?modeldata
??modeldata
vignette("modeldata")
vignette(package="modeldata")
library(modeldata)
?library
library(modeldata, help = T)
cells %>%
count(class) %>%
mutate(prop = n/sum(n))
library("ggplot2")
library("dlstats")
x <- cran_stats(c("emojifont", "ggimage", "hexSticker", "rvcheck"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
x <- cran_stats(c("rsqlite"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
install.packages("RSQLite")
x <- cran_stats(c("RSQLite", "ggplot2"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
?RODBC
x <- cran_stats(c("RSQLite", "RODBC"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
x <- cran_stats(c("RSQLite", "RODBC", "dplyr"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package)) +
labs(title = "Monthly CRAN Package Downloads")
}
cell_split <- initial_split(cells %>% select(-case),
strata = class)
#Here we used the strata argument, which conducts a stratified split. This
#ensures that, despite the imbalance we noticed in our class variable, our
#training and test data sets will keep roughly the same proportions of poorly #
#and well-segmented cells as in the original data. After the initial_split,
#the training() and testing() functions return the actual data sets.
cell_train <- training(cell_split)
cell_test  <- testing(cell_split)
# FIT MODEL
set.seed(234)
rf_fit <-
rf_mod %>%
fit(class ~ ., data = cell_train)
# CREATE MODEL
#One of the benefits of a random forest model is that it is very low maintenance;
#it requires very little preprocessing of the data and the default parameters
#tend to give reasonable results. For that reason, we wonâ€™t create a recipe for
#the cells data.
rf_mod <-
rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
# FIT MODEL
set.seed(234)
rf_fit <-
rf_mod %>%
fit(class ~ ., data = cell_train)
collect_metrics(rf_fit_rs)
# FIT A MODEL WITH RESAMPLING
set.seed(345)
folds <- vfold_cv(cell_train, v = 10)
folds
rf_wf <-
workflow() %>%
add_model(rf_mod) %>%
add_formula(class ~ .)
set.seed(456)
rf_fit_rs <-
rf_wf %>%
fit_resamples(folds)
collect_metrics(rf_fit_rs)
#Think about these values we now have for accuracy and AUC. These performance
#metrics are now more realistic (i.e. lower) than our ill-advised first attempt
#at computing performance metrics in the section above.
rf_testing_pred %>%                   # test set predictions
roc_auc(truth = class, .pred_PS)
r
#Think about these values we now have for accuracy and AUC. These performance
#metrics are now more realistic (i.e. lower) than our ill-advised first attempt
#at computing performance metrics in the section above.
rf_testing_pred <-
predict(rf_fit, cell_test) %>%
bind_cols(predict(rf_fit, cell_test, type = "prob")) %>%
bind_cols(cell_test %>% select(class))
rf_testing_pred %>%                   # test set predictions
roc_auc(truth = class, .pred_PS)
rf_testing_pred %>%                   # test set predictions
accuracy(truth = class, .pred_class)
setwd("./Dropbox/coding/rproj/blogdown-default/")
setwd("../tutorial_tidymodels/")
file.edit("./01_build_model.R")
setwd("../blogdown-default/")
blogdown::serve_site()
knitr::include_graphics("./outline_pic.png")
blogdown::serve_site()
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidyverse',
'tidymodels'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
## Do not break chunk line
## Do not use spaces or periods "." or underscores "_"
## set options for knitr
knitr::opts_chunk$set(
comment = '',
fig.width = 6,
fig.asp = .8,
fig.align="center",
message=F,
error=F,
warning=F,
tidy=T,
comment='',
cache=T,
dev='svg',
echo=F
)
#from ggthemes
library(ggplot2); theme_set(ggthemes::theme_fivethirtyeight())
# color blind friendly palette from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
knitr::include_graphics("./outline-pic.png")
# system & package info
options(width = 120)
session_info()
citation("tidymodels")
vignette(package = "assertthat")
?assertthat
assertthat
library(assertthat)
setwd("~/Dropbox/coding/rproj/blogdown-default/")
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
## Do not break chunk line
## Do not use spaces or periods "." or underscores "_"
## set options for knitr
knitr::opts_chunk$set(
comment = '',
fig.width = 6,
fig.asp = .8,
fig.align="center",
message=F,
error=F,
warning=F,
tidy=T,
comment='',
cache=T,
dev='svg',
echo=F
)
#from ggthemes
library(ggplot2); theme_set(ggthemes::theme_fivethirtyeight())
# color blind friendly palette from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
p <- ggplot(mtcars, aes(mpg, hp, group = cyl, colour = cyl))
p <- p + scale_color_manual(values = cbPalette)
p <- p + geom_point(size = 2)
p <- p + ggtitle("mtcars")
p
# system & package info
options(width = 120)
session_info()
citr:::insert_citation()
citr:::insert_citation()
df.0 <- data.table::fread(input = input)
file <- "~/Dropbox/public/datasets/2021-06-05-us_lynchings.csv"
df.0 <- data.table::fread(input = input)
input <- "~/Dropbox/public/datasets/2021-06-05-us_lynchings.csv"
df.0 <- data.table::fread(input = input)
df.0 %>%
group_by(dataset, year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(df.1, aes(year, deaths, group = dataset, color = dataset)) +
geom_line() +
theme_minimal() +
labs(title = "Annual U.S. Lynchings by Dataset",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
df.0 %>%
group_by(dataset, year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(aes(year, deaths, group = dataset, color = dataset)) +
geom_line() +
theme_minimal() +
labs(title = "Annual U.S. Lynchings by Dataset",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
range(df.0$date)
range(df.0$date, na.rm = T)
df.0 %>%
group_by(year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(df.2, aes(year, deaths)) +
geom_line() +
theme_minimal() +
labs(title = "Total Annual U.S. Lynchings",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
df.0 %>%
group_by(year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(aes(year, deaths)) +
geom_line() +
theme_minimal() +
labs(title = "Total Annual U.S. Lynchings",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin"
)
```{r plot-total-lynchings}
c("MS", "GA", "TX", "LA", "AL", "FL", "AR", "TN", "KY", "SC",
"OK", "MO", "NC", "VA", "MT", "KS", "CO", "CA", "IN", "WV", "WY",
"NE", "IL", "MD", "NM", "IA", "OH", "WA", "AZ", "SD", "ND", "ID",
"MI", "MN", "NV", "OR", "WI", "UT", "NY", "PA", "CT", "DE", "NJ"
)
df.3 <-
df.0 %>%
group_by(state, year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths")
df.3$state <- factor(df.3$state,
levels = c("MS", "GA", "TX", "LA", "AL", "FL", "AR", "TN", "KY", "SC",
"OK", "MO", "NC", "VA", "MT", "KS", "CO", "CA", "IN", "WV", "WY",
"NE", "IL", "MD", "NM", "IA", "OH", "WA", "AZ", "SD", "ND", "ID",
"MI", "MN", "NV", "OR", "WI", "UT", "NY", "PA", "CT", "DE", "NJ"
))
df.4 <- df.3 %>% dplyr::filter(state %in% levels(df.3$state)[1:12])
p <- ggplot(df.4, aes(year, deaths, group = state, color = state))
p <- p + geom_line()
p <- p + facet_wrap(vars(state))
p <- p + theme_minimal()
p <- p + theme(legend.position = "none")
p <- p + geom_smooth()
p <- p + labs(title = "Annual U.S. Lynchings by State",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
p
# Build Dataset
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
View(data)
a <-
df.0 %>%
group_by(race, gender) %>%
summarize(n = tally())
a <-
df.0 %>%
group_by(race, gender) %>%
tally()
View(a)
# treemap
treemap(a,
index=c("group","subgroup"),
vSize="value",
type="index"
)
# library
library(treemap)
# treemap
treemap(a,
index=c("group","subgroup"),
vSize="value",
type="index"
)
# treemap
treemap(a,
index=c("race","gender"),
vSize="n",
type="index"
)
?treemap
View(a)
a <-
df.0 %>%
group_by(race, gender) %>%
tally()
# library
library(treemap)
# treemap
treemap(a,
index=c("race","gender"),
vSize="n",
type="index",
palette = cbPalette
)
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
## Do not break chunk line
## Do not use spaces or periods "." or underscores "_"
## set options for knitr
knitr::opts_chunk$set(
comment = '',
fig.width = 6,
fig.asp = .8,
fig.align="center",
message=F,
error=F,
warning=F,
tidy=T,
comment='',
cache=T,
dev='svg',
echo=F
)
#from ggthemes
library(ggplot2); theme_set(ggthemes::theme_fivethirtyeight())
# color blind friendly palette from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
input <- "~/Dropbox/public/datasets/2021-06-05-us_lynchings.csv"
df.0 <- data.table::fread(input = input)
df.0 %>%
group_by(dataset, year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(aes(year, deaths, group = dataset, color = dataset)) +
geom_line() +
theme_minimal() +
labs(title = "Annual U.S. Lynchings by Dataset",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
df.0 %>%
group_by(year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths") %>%
ggplot(aes(year, deaths)) +
geom_line() +
theme_minimal() +
labs(title = "Total Annual U.S. Lynchings",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin"
)
df.3 <-
df.0 %>%
group_by(state, year = lubridate::floor_date(date, "year")) %>%
tally(name = "deaths")
df.3$state <- factor(df.3$state,
levels = c("MS", "GA", "TX", "LA", "AL", "FL", "AR", "TN", "KY", "SC",
"OK", "MO", "NC", "VA", "MT", "KS", "CO", "CA", "IN", "WV", "WY",
"NE", "IL", "MD", "NM", "IA", "OH", "WA", "AZ", "SD", "ND", "ID",
"MI", "MN", "NV", "OR", "WI", "UT", "NY", "PA", "CT", "DE", "NJ"
))
df.4 <- df.3 %>% dplyr::filter(state %in% levels(df.3$state)[1:12])
p <- ggplot(df.4, aes(year, deaths, group = state, color = state))
p <- p + geom_line()
p <- p + facet_wrap(vars(state))
p <- p + theme_minimal()
p <- p + theme(legend.position = "none")
p <- p + geom_smooth()
p <- p + labs(title = "Annual U.S. Lynchings by State",
subtitle = "1882 to 1936",
caption = "Source: Project HAL & Seguin")
p
a <-
df.0 %>%
group_by(race, gender) %>%
tally()
# library
library(treemap)
# treemap
treemap(a,
index=c("race","gender"),
vSize="n",
type="index",
palette = cbPalette
)
# system & package info
options(width = 120)
session_info()
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette
)
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index"
)
RColorBrewer::display.brewer.all()
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette
)
a <-
df.0 %>%
group_by(race, gender) %>%
tally()
# library
library(treemap)
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette
)
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette,
title = "Lynching Demographics\n Gender & Race"
)
# treemap
treemap(a,
index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette,
title = "Lynching Demographics--Gender & Race"
)
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
df.0 %>%
group_by(race, gender) %>%
tally() %>%
treemap(index=c("gender", "race"),
vSize="n",
type="index",
palette = cbPalette,
title = "Lynching Demographics--Gender & Race"
)
rm(a)
colnames(df.0)
df.0 %>% dplyr::filter(dataset == "tolnay")
df.0 %>% dplyr::filter(dataset == "tolnay") %>% distinct(state.abb)
df.0 %>% dplyr::filter(dataset == "tolnay") %>% distinct(state)
df.0 %>% dplyr::filter(dataset == "tolnay") %>% distinct(state) %>% pull()
df.0 %>% group_by(state) %>% tally()
df.0 %>% group_by(state) %>% tally() %>% arrange(-n)
df.0 %>% filter(state == "KY") %>% tally() %>% arrange(-n)
df.0 %>% dplyr::filter(state == "KY") %>% tally() %>% arrange(-n)
df.0 %>% filter(state == "KY") %>% select(date) %>% range(na.rm = T)
df.0 %>% dplyr::filter(state == "KY") %>% select(date) %>% range(na.rm = T)
df.0 %>% dplyr::filter(state == "KY") %>% select(date) %>% arrange()
setwd("../black_lynchings/")
