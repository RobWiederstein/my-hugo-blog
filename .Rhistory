df |>
mutate(hour = lubridate::hour(day), .after = day) |>
group_by(hour) |>
summarize(appliances = mean(appliances_avg),
lights = mean(lights_avg)) |>
select(hour, appliances, lights) |>
ungroup() |>
t() |>
as.data.frame() |>
setNames(0:23) |>
filter(!row_number() %in% c(1))
View(df1)
max(df1[1, ])
df2 <-
rbind(rep(200, 24), rep(0, 24), df1)
View(df2)
head(df2)
# The default radar chart
radarchart(df2)
?radarchart
# The default radar chart
radarchart(df2)
# The default radar chart
radarchart(df2,
pcol = colorspace::qualitative_hcl(2, palette = "Dark2"))
blogdown::serve_site()
library(lubridate)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
df1 <-
df |>
mutate(
hour = hour(day),
week_day = wday(day),
.keep = "all",
.after = day) |>
group_by(week_day, hour) |>
summarise(
mean_lights = mean(lights_avg),
mean_appliance = mean(appliances_avg),
.groups = "drop"
) |>
mutate(hour1 = str_pad(hour, width = 2, side = "left", pad = "0"),
.after = hour) |>
unite(c(week_day, hour1), col = "week_hour", remove = F, sep = "")
# factor
df1$week_hour <- factor(df1$week_hour, ordered = T)
#plot 1
p1 <-
df1 |>
ggplot() +
aes(week_hour, mean_lights, group = week_hour) +
geom_col() +
scale_x_discrete(breaks = paste0(1:7, "00"),
labels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")) +
theme_tufte() +
labs(title = "Light Usage (Wh)",
x = "",
y = "") +
theme(text = element_text(size = 9))
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-day, appliances_avg, lights_avt) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(appliances_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value) +
geom_violin() +
theme_tufte()
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-day, appliances_avg, lights_avg) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(appliances_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value) +
geom_violin() +
theme_tufte()
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-c(day, appliances_avg, lights_avg)) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(appliances_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value) +
geom_violin() +
theme_tufte()
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-c(day, appliances_avg, lights_avg)) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(t_out_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value) +
geom_violin() +
theme_tufte()
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-c(day, appliances_avg, lights_avg)) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(t_out_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value) +
labs(x = "",
y = "") +
geom_violin() +
theme_tufte()
library(dplyr)
library(ggplot2)
library(ggthemes)
df |>
select(-c(day, appliances_avg, lights_avg)) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(t_out_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value, fill = factor(name)) +
labs(x = "",
y = "") +
geom_violin() +
theme_tufte()
?scale_fill_discrete
?ggplot2::scale_fill_discrete
library(dplyr)
library(ggplot2)
library(ggthemes)
colors <- colorspace::qualitative_hcl(9, palette = "Dark2")
df |>
select(-c(day, appliances_avg, lights_avg)) |>
mutate(across(t_out_avg:rh_in_avg, ~scale(.x))) |>
tidyr::pivot_longer(t_out_avg:rh_in_avg) |>
ggplot() +
aes(factor(name), value, fill = factor(name)) +
scale_fill_discrete(n = colors) +
labs(x = "",
y = "") +
geom_violin(alpha = .33) +
theme_tufte()
df |>
select(day,
t_in_avg,
rh_in_avg)
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg)
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg) |>
ggplot() +
aes(day, value) +
geom_line() +
facet_wrap(vars(name), scales = "free", ncol = 1) +
```
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg) |>
ggplot() +
aes(day, value) +
geom_line() +
facet_wrap(vars(name), scales = "free", ncol = 1)
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg) |>
ggplot() +
aes(day, value) +
geom_line() +
facet_wrap(vars(name), scales = "free", ncol = 1) +
geom_smooth(method = "loess", formula = "y ~ x", span = .25) +
geom_rangeframe(color = "black") +
scale_x_datetime(name = "") +
scale_y_continuous(name = "") +
scale_color_manual(values = colors) +
theme_tufte() +
theme(legend.position = "none") +
labs(
title = "Weather Indicators",
caption = "Source: UC Irvine Machine Learning Repository"
)
colors <- colorspace::qualitative_hcl(2, palette = "Dark2")
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg) |>
ggplot() +
aes(day, value) +
geom_line() +
facet_wrap(vars(name), scales = "free", ncol = 1) +
geom_smooth(method = "loess", formula = "y ~ x", span = .25) +
geom_rangeframe(color = "black") +
scale_x_datetime(name = "") +
scale_y_continuous(name = "") +
scale_color_manual(values = colors) +
theme_tufte() +
theme(legend.position = "none") +
labs(
title = "Building Interior",
caption = "Source: UC Irvine Machine Learning Repository"
)
library(ggplot2)
library(tidyr)
library(dplyr)
colors <- colorspace::qualitative_hcl(2, palette = "Dark2")
df |>
select(day,
t_in_avg,
rh_in_avg) |>
filter(day >= "2016-02-01" & day <= "2016-02-28") |>
pivot_longer(t_in_avg:rh_in_avg) |>
ggplot() +
aes(day, value) +
geom_line() +
facet_wrap(vars(name), scales = "free", ncol = 1) +
geom_smooth(method = "loess", formula = "y ~ x", span = .25) +
geom_rangeframe(color = "black") +
scale_x_datetime(name = "") +
scale_y_continuous(name = "") +
scale_color_manual(values = colors) +
theme_tufte() +
theme(legend.position = "none") +
labs(
title = "Building Interior",
caption = "Source: UC Irvine Machine Learning Repository"
)
citation("blogdown")
install.packages("citr")
devtools::install_github("crsh/citr")
library(citr)
?citr::insert_citation
citr:::insert_citation()
blogdown:::preview_site()
blogdown::serve_site()
library(blogdown)
stop_server()
blogdown::serve_site()
stop_server()
blogdown::serve_site()
blogdown::serve_site()
stop_server()
blogdown::stop_server()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::serve_site()
?blogdown::build_dir
blogdown::build_dir("./content/post/2023-01-11-building-energy-usage-exploratory-data-analysis/")
blogdown:::new_post_addin()
citr:::insert_citation()
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
citr:::insert_citation()
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
# write packages used to bib in current directory
citr:::insert_citation()
blogdown::serve_site()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
file.copy(from="./content/post/2023-01-11-building-energy-usage-exploratory-data-analysis/", to = "./content/post/2023-01-18-predicting-building-energy-usage/")
file.copy(from="./content/post/2023-01-11-building-energy-usage-exploratory-data-analysis/feature.jpg", to = "./content/post/2023-01-18-predicting-building-energy-usage/")
1
blogdown::serve_site()
#install and load the ggplot2 package
install.packages("ggplot2")
library(ggplot2)
#plot the histogram
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth = 2, fill = "darkblue", color = "black") +
labs(title = "Histogram of MPG in mtcars", x = "Miles per Gallon", y = "Frequency")
install.packages("ggplot2")
blogdown::serve_site()
blogdown::serve_site()
df <- readRDS(file = "./data/energy.rds")
df <- readRDS(file = "./energy.rds")
## Load frequently used packages for blog posts
packages <- c(
'devtools', #for session info
'ggthemes', #for plots
'blogdown',
'tidymodels',
'modeltime',
'tidyverse',
'lubridate',
'timetk'
)
lapply(packages, function(x) {
if (!requireNamespace(x)) install.packages(x)
library(x, character.only = TRUE)
})
## Do not break chunk line
## Do not use spaces or periods "." or underscores "_"
## set options for knitr
knitr::opts_chunk$set(
comment = '',
fig.width = 6,
fig.asp = .8,
fig.align="center",
message=F,
error=F,
warning=F,
tidy=T,
comment='',
cache=T,
dev='svg',
echo=F
)
#from ggthemes
library(ggplot2); theme_set(ggthemes::theme_fivethirtyeight())
# color blind friendly palette from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
# write packages used to bib in current directory
knitr::write_bib(.packages(), "./packages.bib")
df <- readRDS(file = "./energy.rds")
# system & package info
options(width = 120)
session_info()
#plot time series
df |>
filter(date_time > "2016-02-01 00:00:00" &
date_time < "2016-03-01 00:00:00") |>
plot_time_series(date_time, appliances, .interactive = interactive) +
labs(title = "Appliance Energy Usage")
#plot time series
df |>
filter(date_time > "2016-02-01 00:00:00" &
date_time < "2016-03-01 00:00:00") |>
plot_time_series(date_time, appliances, .interactive = F) +
labs(title = "February Appliance Energy Usage")
# Split Data 90/10
set.seed(1)
# note the "initial_time_split" function
df_splits <- initial_time_split(df, prop = 0.9)
df_train <- training(df_splits)
df_test <- testing(df_splits)
# Split Data 90/10
set.seed(1)
# note the "initial_time_split" from "resamples" package
df_splits <- initial_time_split(df, prop = 0.9)
df_train <- training(df_splits)
df_test <- testing(df_splits)
# Split Data 90/10
set.seed(1)
# note the "initial_time_split" from "resamples" package
df_splits <- initial_time_split(df, prop = 0.9)
df_train <- training(df_splits)
df_test <- testing(df_splits)
# Model 1: auto_arima ----
model_fit_arima_no_boost <- arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(appliances ~ date_time + t1, data = df_train)
# Model 2: arima_boost ----
model_fit_arima_boosted <- arima_boost(
min_n = 2,
learn_rate = 0.015
) %>%
set_engine(engine = "auto_arima_xgboost") %>%
fit(appliances ~ date_time + as.numeric(date_time) + factor(hour(date_time), ordered = F),
data = df_train)
# Model 3: ets ----
model_fit_ets <- exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(appliances ~ ., data = df_train)
# Model 4: prophet ----
model_fit_prophet <- prophet_reg() %>%
set_engine(engine = "prophet") %>%
fit(appliances ~ date_time, data = training(df_splits))
# Model 5: lm ----
model_fit_lm <- linear_reg() %>%
set_engine("lm") %>%
fit(appliances ~ date_time,
data = training(df_splits))
# Add fitted models to model table
models_tbl <- modeltime_table(
model_fit_arima_no_boost,
model_fit_arima_boosted,
model_fit_ets,
model_fit_prophet,
model_fit_lm
)
models_tbl
# calibrate
calibration_tbl <- models_tbl %>%
modeltime_calibrate(new_data = testing(df_splits))
calibration_tbl
# Visualizing the Forecast Test
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(df_splits),
actual_data = df
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = T,
labs(title = "X")
)
# Visualizing the Forecast Test
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(df_splits),
actual_data = df
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = F,
labs(title = "X")
)
# Visualizing the Forecast Test
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(df_splits),
actual_data = df
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
#.interactive      = F,
labs(title = "X")
)
calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = interactive
)
calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = F
)
refit_tbl <-
calibration_tbl %>%
filter(.model_desc == "PROPHET") |>
modeltime_refit(data = df)
refit_tbl %>%
modeltime_forecast(h = "1 week", actual_data = df) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive
)
refit_tbl <-
calibration_tbl %>%
filter(.model_desc == "PROPHET") |>
modeltime_refit(data = df)
refit_tbl %>%
modeltime_forecast(h = "1 week", actual_data = df) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = F
)
refit_tbl <-
calibration_tbl %>%
filter(.model_desc == "PROPHET") |>
modeltime_refit(data = df)
refit_tbl %>%
modeltime_forecast(h = "1 week", actual_data = df) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = T
)
14.5/5.49
5.49/14.5
5.69/22
21.29/81
19.49/152
12/12.49
40/16.99
16.99/32
12.49/12
10/12
36/17
17/36
11/48
10.49/20
11.79/115
60/15
15/60
blogdown:::new_post_addin()
install.packages("SASmarkdown")
library(SASmarkdown)
vignettes("SASmarkdown")
vignette("SASmarkdown")
vignette(package = "SASmarkdown")
